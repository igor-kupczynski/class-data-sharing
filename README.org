#+TITLE: README

*Work in progress*

This post investigates the gains from enabling Class Data Sharing (CDS) on an
elasticsearch container.

* What is Class Data Sharing?


** What can we gain?


* Prepare CDS

** Intro --- we need OpenJDK 10

Let's use elasticsearch docker image to test the impact of class data sharing.

First, we need to repackage it with openjdk 10.

#+BEGIN_SRC dockerfile :tangle target/Dockerfile-openjdk10
# Dockerfile-openjdk10
FROM docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.4

COPY pkg/ /app/pkg

RUN cd /app/pkg && \
    tar -zxf openjdk-10.0.1_linux-x64_bin.tar.gz && \
    mkdir -p /opt/java && \
    mv jdk-10.0.1 /opt/java

ENV JAVA_HOME /opt/java/jdk-10.0.1
#+END_SRC

Let's create a Makefile, we'll add more to it as we go:
#+BEGIN_SRC makefile :tangle target/Makefile
# Makefile
.PHONY: help
help:
	@ echo "# Elasticsearch and Class Data Sharing (CDS) experiment"
	@ echo
	@ echo "build-jdk10         - repackage elasticsearch-oss with openjdk10"
	@ echo 
	@ echo "clean-cache         - nuke the class list and cache"
	@ echo "generate-class-list - list classes used by elasticsearch"
	@ echo "dump-class-cache    - dump the classes from the list to cache file"
	@ echo "build-cds           - repackge the class cache in the elasticsearch docker container"
	@ echo
	@ echo "run-{cds/nocds}     - run elasticsearch with/without class data sharing"
	@ echo

pkg/openjdk-10.0.1_linux-x64_bin.tar.gz:
	@ wget -P pkg https://download.java.net/java/GA/jdk10/10.0.1/fb4372174a714e6b8c52526dc134031e/10/openjdk-10.0.1_linux-x64_bin.tar.gz

pkg: pkg/openjdk-10.0.1_linux-x64_bin.tar.gz

.PHONY: build-jdk10
build-jdk10: pkg
	@ docker build -f Dockerfile-openjdk10 -t "ikupczynski/elasticsearch-oss:6.2.4-openjdk10" .

#+END_SRC

And now we can get our repackaged image:
#+BEGIN_SRC sh
make build-jdk10
#+END_SRC

** Create a list of classes used by Elasticsearch

We're going to run start elastics and let it log all the classes it uses to
a file =-XX:DumpLoadedClassList=/app/cache/elasticsearch_appcds=. We need to
specifically enable the support for application classes with =-XX:+UseAppCDS=,
otherwise will limit ourselves to jdk classes only.

#+BEGIN_SRC makefile :tangle target/Makefile
CWD := $(shell pwd)

.PHONY: clean-cache
clean-cache:
	@ rm -rf cache/elasticsearch_appcds*
	@ echo "Nuked cache"

cache/elasticsearch_appcds.cls:
	@ touch cache/elasticsearch_appcds.cls
	@ export ES_JAVA_OPTS="-XX:+UseAppCDS \
			-XX:DumpLoadedClassList=/app/cache/elasticsearch_appcds.cls" && \
		docker run \
			-d --name generate-class-list \
			-p 9200:9200 -p 9300:9300 \
			-e "discovery.type=single-node" \
			-v $(CWD)/cache:/app/cache \
			--env ES_JAVA_OPTS \
			-it "ikupczynski/elasticsearch-oss:6.2.4-openjdk10"
	@ echo "Waiting until elasticsearch starts"
	@ bin/wait-on-elastic
	@ docker rm -f generate-class-list
	@ echo "Class list generated. Number of classes: "
	@ wc -l cache/elasticsearch_appcds.cls
#+END_SRC


We start elasticsearch in the background (=docker run -d=) and wait until it
starts responding to requests with a following script:

#+BEGIN_SRC sh :tangle target/bin/wait-on-elastic :shebang "#!/bin/bash"
until $(curl --output /dev/null --silent --head --fail localhost:9200); do
    printf '.'
    sleep 1
done
#+END_SRC

If we run =make cache/elasticsearch_appcds.cls= we'll get a list of
approximately 7k classes used by elasticsearch.

#+BEGIN_SRC sh
$ make cache/elasticsearch_appcds.cls
e2afbb966e1ad64d1296ada7c67a1038301834f8419aafa419ebbf74c7cd499b
Waiting until elasticsearch starts
...........generate-class-list
Class list generated. Number of classes:
    7111 cache/elasticsearch_appcds.cls

$ head -n 5 cache/elasticsearch_appcds.cls
java/lang/Object
java/lang/String
java/io/Serializable
java/lang/Comparable
java/lang/CharSequence

$ tail -n 5 cache/elasticsearch_appcds.cls
org/elasticsearch/common/io/Streams$FlushOnCloseOutputStream
org/elasticsearch/Version$DeclaredVersionsHolder
com/fasterxml/jackson/core/io/JsonStringEncoder
com/fasterxml/jackson/core/util/ByteArrayBuilder
org/elasticsearch/common/bytes/PagedBytesReference$1
#+END_SRC

Note that the list is generate while your app is running, so if you load any
classes manually later on, you should exercise this codepath. In our case we
just wait until elasticsearch can respond to a simple rest request.

*** JVM error

Normally, the next step would be to take the =elasticsearch_appcds= class list
and use it to populate the cache file, however I've hit some limit (either a JVM
bug, or more likely, some memory limits or docker-jvm interplay) and I needed to
trim down the class list by 1/7 to around 6k. See [[error.org]] for more details.

I leave the root cause investigation for some later time. Now, let's just trim
the class list.

#+BEGIN_SRC makefile :tangle target/Makefile
# Workaround of the JVM error
cache/elasticsearch_appcds.cls-thin: cache/elasticsearch_appcds.cls
	@ head -n 6218 cache/elasticsearch_appcds.cls > cache/elasticsearch_appcds.cls-thin
	@ echo "Filtered the class list. Number of classes: "
	@ wc -l cache/elasticsearch_appcds.cls-thin

generate-class-list: cache/elasticsearch_appcds.cls-thin

#+END_SRC


** Prepopulate the class cache

Now that we have the class list, let's use it to pre-populate the class cache.
Contrary to the previous step, here the jvm won't run the app. It will start a
process to go through the class list, load each of the classes and dump them to
the cache file and stop the jvm.


#+BEGIN_SRC makefile :tangle target/Makefile
cache/elasticsearch_appcds.jsa: generate-class-list
	@ touch cache/elasticsearch_appcds.jsa
	@ export ES_JAVA_OPTS="-Xshare:dump \
			-XX:+UseAppCDS \
			-XX:SharedClassListFile=/app/cache/elasticsearch_appcds.cls-thin \
			-XX:+UnlockDiagnosticVMOptions \
			-XX:SharedArchiveFile=/app/cache/elasticsearch_appcds.jsa" && \
		docker run \
			--rm --name dump-class-cache \
			-e "discovery.type=single-node" \
			-v $(CWD)/cache:/app/cache \
			--env ES_JAVA_OPTS \
			-it "ikupczynski/elasticsearch-oss:6.2.4-openjdk10"

dump-class-cache: generate-class-list cache/elasticsearch_appcds.jsa

#+END_SRC


Let's try it out.
#+BEGIN_SRC sh
$ make dump-class-cache
OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 3
Allocated temporary class space: 1073741824 bytes at 0x00000008c0000000
Allocated shared space: 3221225472 bytes at 0x0000000800000000
Loading classes to share ...
(...)
Loading classes to share: done.
Rewriting and linking classes ...
Preload Warning: Removed error class: org.apache.logging.log4j.core.async.AsyncLoggerContext
Rewriting and linking classes: done
Number of classes 7211
    instance classes   =  7087
    obj array classes  =   116
    type array classes =     8
Updating ConstMethods ... done.
Removing unshareable information ... done.
Scanning all metaspace objects ...
Allocating RW objects ...
Allocating RO objects ...
Relocating embedded pointers ...
Relocating external roots ...
Dumping symbol table ...
Relocating SystemDictionary::_well_known_klasses[] ...
(...)
Removing java_mirror ... done.
mc  space:     18184 [  0.0% of total] out of     20480 bytes [ 88.8% used] at 0x0000000800000000
rw  space:  18630320 [ 22.6% of total] out of  18632704 bytes [100.0% used] at 0x0000000800005000
ro  space:  31856600 [ 38.6% of total] out of  31858688 bytes [100.0% used] at 0x00000008011ca000
md  space:      6160 [  0.0% of total] out of      8192 bytes [ 75.2% used] at 0x000000080302c000
od  space:  31914104 [ 38.7% of total] out of  31916032 bytes [100.0% used] at 0x000000080302e000
total    :  82425368 [100.0% of total] out of  82436096 bytes [100.0% used]
#+END_SRC

And the resulting file is ~80Mb~ of pre-loaded classes:
#+BEGIN_SRC sh
$ ls -lah cache/elasticsearch_appcds.jsa
-r--r--r--  1 igor  staff    79M May 20 20:52 cache/elasticsearch_appcds.jsa
#+END_SRC

** Package it with the container

We have the class cache, now we can package it with the container.


Here is the dockerfile:
#+BEGIN_SRC dockerfile :tangle target/Dockerfile-cds
# Dockerfile-cds
FROM ikupczynski/elasticsearch-oss:6.2.4-openjdk10

COPY cache/ /app/cache
#+END_SRC

As you can see it is quite simple, it just copies the cache to the container.

And the complimentary =Makefile= addition:
#+BEGIN_SRC makefile :tangle target/Makefile
CDS_IMAGE = ikupczynski/elasticsearch-oss:6.2.4-cds

.PHONY: build-cds
build-cds: dump-class-cache
	@ docker build -f Dockerfile-cds -t $(CDS_IMAGE) .

#+END_SRC

I've build and pushed the image to dockerhub, so you can carry on from here with

#+BEGIN_SRC sh
docker pull ikupczynski/elasticsearch-oss:6.2.4-cds
#+END_SRC

** Convenience targets to run elasticsearch

Let's define some =make= targets to let us run elasticsearch both with and
without CDS.

#+BEGIN_SRC makefile :tangle target/Makefile
RUN_NO_CDS = export ES_JAVA_OPTS="-Xshare:off \
			-Xlog:class+load:file=/app/logs/classload-nocds.log " && \
		docker run \
			--rm --name run-no-cds \
			-p 9200:9200 -p 9300:9300 \
			-e "discovery.type=single-node" \
			-v $(CWD)/cache:/app/cache \
			-v $(CWD)/logs:/app/logs \
			--env ES_JAVA_OPTS \
			-it 

.PHONY: clean-nocds-logs
clean-nocds-logs:
	@ rm -f logs/classload-nocds.log*

.PHONY: run-nocds
run-nocds: clean-nocds-logs
	@ $(RUN_NO_CDS) $(CDS_IMAGE)

# `time-nocds` given mostly for illustration, it is not too acurate
.PHONY: time-nocds
time-nocds:
	@ $(RUN_NO_CDS) -d $(CDS_IMAGE)
	@ echo "Timing the wait on elastic"
	@ time bin/wait-on-elastic
	@ docker rm -f run-no-cds

RUN_CDS = export ES_JAVA_OPTS="-Xshare:on \
			-Xlog:class+load:file=/app/logs/classload-cds.log \
			-XX:+UseAppCDS \
			-XX:SharedClassListFile=/app/cache/elasticsearch_appcds.cls-thin \
			-XX:+UnlockDiagnosticVMOptions \
			-XX:SharedArchiveFile=/app/cache/elasticsearch_appcds.jsa" && \
		docker run \
			--rm --name run-cds \
			-p 9200:9200 -p 9300:9300 \
			-e "discovery.type=single-node" \
			-v $(CWD)/cache:/app/cache \
			-v $(CWD)/logs:/app/logs \
			--env ES_JAVA_OPTS \
			-it

.PHONY: clean-cds-logs
clean-cds-logs:
	@ rm -f logs/classload-cds.log*

.PHONY: run-cds
run-cds:
	@ $(RUN_CDS) $(CDS_IMAGE)

# `time-cds` given mostly for illustration, it is not too acurate
.PHONY: time-cds
time-cds:
	@ $(RUN_CDS) -d $(CDS_IMAGE)
	@ echo "Timing the wait on elastic"
	@ time bin/wait-on-elastic
	@ docker rm -f run-cds
#+END_SRC

Now we can run elasticsearch with or without CDS:
#+BEGIN_SRC sh
make run-cds
make run-nocds
#+END_SRC

* Experiment

** Let's see how the classes are loaded

We can run the no-cds version in a terminal
#+BEGIN_SRC sh
$ make run-nocds
OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
[2018-05-20T19:42:15,832][INFO ][o.e.n.Node               ] [] initializing ...
[2018-05-20T19:42:15,988][INFO ][o.e.e.NodeEnvironment    ] [aMmFJlH] using [1] data paths, mounts [[/ (overlay)]], net usable_space [48.8gb], net total_space [62.7gb], types [overlay]
[2018-05-20T19:42:15,989][INFO ][o.e.e.NodeEnvironment    ] [aMmFJlH] heap size [1007.3mb], compressed ordinary object pointers [true]
[2018-05-20T19:42:15,994][INFO ][o.e.n.Node               ] node name [aMmFJlH] derived from node ID [aMmFJlHFR3a6CbSRsnC6JA]; set [node.name] to override
[2018-05-20T19:42:15,995][INFO ][o.e.n.Node               ] version[6.2.4], pid[1], build[ccec39f/2018-04-12T20:37:28.497551Z], OS[Linux/4.9.87-linuxkit-aufs/amd64], JVM[Oracle Corporation/OpenJDK 64-Bit Server VM/10.0.1/10.0.1+10]
[2018-05-20T19:42:15,995][INFO ][o.e.n.Node               ] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=/tmp/elasticsearch.PXDU79XV, -XX:+HeapDumpOnOutOfMemoryError, -Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m, -Djava.locale.providers=COMPAT, -Des.cgroups.hierarchy.override=/, -Xshare:off, -Xlog:class+load:file=/app/logs/classload-nocds.log, -Des.path.home=/usr/share/elasticsearch, -Des.path.conf=/usr/share/elasticsearch/config]
# (...)
# ^^^ Note JVM arguments `-Xshare:off, -Xlog:class+load:file=/app/logs/classload-nocds.log`
#+END_SRC

And then inspect the logs
#+BEGIN_SRC sh
$ grep " org.elasticsearch.bootstrap.Bootstrap " logs/classload-nocds.log* | grep Bootstrap
logs/classload-nocds.log:[1.306s][info][class,load] org.elasticsearch.bootstrap.Bootstrap source: file:/usr/share/elasticsearch/lib/elasticsearch-6.2.4.jar
#+END_SRC

As we can see, the main class was loaded from the jar, after =1.306s=.

Let's compare that with the *cds* version:
#+BEGIN_SRC sh
$ make run-cds
OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
[2018-05-20T19:50:18,712][INFO ][o.e.n.Node               ] [] initializing ...
[2018-05-20T19:50:18,810][INFO ][o.e.e.NodeEnvironment    ] [0L2yDFU] using [1] data paths, mounts [[/ (overlay)]], net usable_space [48.8gb], net total_space [62.7gb], types [overlay]
[2018-05-20T19:50:18,811][INFO ][o.e.e.NodeEnvironment    ] [0L2yDFU] heap size [1007.3mb], compressed ordinary object pointers [true]
[2018-05-20T19:50:18,813][INFO ][o.e.n.Node               ] node name [0L2yDFU] derived from node ID [0L2yDFU9SjmPEOw5xtIyGw]; set [node.name] to override
[2018-05-20T19:50:18,814][INFO ][o.e.n.Node               ] version[6.2.4], pid[1], build[ccec39f/2018-04-12T20:37:28.497551Z], OS[Linux/4.9.87-linuxkit-aufs/amd64], JVM[Oracle Corporation/OpenJDK 64-Bit Server VM/10.0.1/10.0.1+10]
[2018-05-20T19:50:18,815][INFO ][o.e.n.Node               ] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=/tmp/elasticsearch.clFtu2fQ, -XX:+HeapDumpOnOutOfMemoryError, -Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m, -Djava.locale.providers=COMPAT, -Des.cgroups.hierarchy.override=/, -Xshare:on, -Xlog:class+load:file=/app/logs/classload-cds.log, -XX:+UseAppCDS, -XX:SharedClassListFile=/app/cache/elasticsearch_appcds.cls-thin, -XX:+UnlockDiagnosticVMOptions, -XX:SharedArchiveFile=/app/cache/elasticsearch_appcds.jsa, -Des.path.home=/usr/share/elasticsearch, -Des.path.conf=/usr/share/elasticsearch/config]
# (...)
# ^^^ Note JVM arguments `-Xshare:on, -Xlog:class+load:file=/app/logs/classload-cds.log, -XX:+UseAppCDS, -XX:SharedClassListFile=/app/cache/elasticsearch_appcds.cls-thin, -XX:+UnlockDiagnosticVMOptions, -XX:SharedArchiveFile=/app/cache/elasticsearch_appcds.jsa`
#+END_SRC


#+BEGIN_SRC sh
$ grep " org.elasticsearch.bootstrap.Bootstrap " logs/classload-cds.log* | grep Bootstrap
logs/classload-cds.log:[1.308s][info][class,load] org.elasticsearch.bootstrap.Bootstrap source: shared objects file

$ grep -c "shared objects file" logs/classload-cds.log
6201
#+END_SRC

This time our class was loaded from the =shared objects file=, which means the
cache. In fact =6201= classes were loaded from the cache, which means almost all
from our =6218= classes on the list.

** Memory usage

** Performance
